---
import SEO from '../components/SEO.astro';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
  keywords?: string;
  canonicalURL?: string;
  publishedTime?: string;
  modifiedTime?: string;
  section?: string;
  tags?: string[];
  structuredData?: any;
}

const { 
  title, 
  description = "West Group Financial - Expert financial guidance for your future", 
  image, 
  type = "website",
  keywords,
  canonicalURL,
  publishedTime,
  modifiedTime,
  section,
  tags,
  structuredData
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- Link the global CSS from the public directory -->
    <link rel="stylesheet" href="/styles/global.css" />
    
    <SEO 
      title={title}
      description={description}
      image={image}
      type={type}
      keywords={keywords}
      canonicalURL={canonicalURL}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      section={section}
      tags={tags}
      structuredData={structuredData}
    />

    <!-- Preload critical resources -->
    <link rel="preload" href="/images/logo.png" as="image" />
    
    <!-- Critical CSS -->
    <style>
      .fade-in {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease, transform 0.6s ease;
      }
      .fade-in.visible {
        opacity: 1;
        transform: translateY(0);
      }
      .stagger-1 { transition-delay: 0.1s; }
      .stagger-2 { transition-delay: 0.2s; }
      .stagger-3 { transition-delay: 0.3s; }
      .stagger-4 { transition-delay: 0.4s; }
      .hover-lift {
        transition: transform 0.3s ease;
      }
      .hover-lift:hover {
        transform: translateY(-2px);
      }
      
      /* Loading skeleton */
      .skeleton {
        background: linear-gradient(90deg, #1e293b 25%, #334155 50%, #1e293b 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
      }
      @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
    </style>
  </head>
  <body class="bg-slate-900 text-white min-h-screen">
    <slot />
    
    <!-- Performance monitoring -->
    <script is:inline>
      // Performance monitoring
      if ('performance' in window && 'PerformanceObserver' in window) {
        const observer = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.entryType === 'largest-contentful-paint') {
              console.log('LCP:', entry.startTime);
            }
          }
        });
        observer.observe({ entryTypes: ['largest-contentful-paint'] });
      }
    </script>

    <!-- Intersection Observer for animations -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function() {
        // Animation observer
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
            }
          });
        }, observerOptions);

        // Observe all fade-in elements
        document.querySelectorAll('.fade-in').forEach(el => {
          observer.observe(el);
        });

        // Hover effects for lift elements
        document.querySelectorAll('.hover-lift').forEach(el => {
          el.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px) translateZ(0)';
          });
          
          el.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) translateZ(0)';
          });
        });

        // Lazy loading for images
        if ('IntersectionObserver' in window) {
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                if (img.dataset.src) {
                  img.src = img.dataset.src;
                  img.classList.remove('skeleton');
                  imageObserver.unobserve(img);
                }
              }
            });
          });

          document.querySelectorAll('img[data-src]').forEach(img => {
            imageObserver.observe(img);
          });
        }
      });
    </script>

    <!-- Schema.org structured data -->
    <script is:inline type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "FinancialService",
        "name": "West Group Financial",
        "description": "Expert financial guidance and wealth management services",
        "url": "https://westgroupfinancial.com",
        "logo": "https://westgroupfinancial.com/images/logo.png",
        "contactPoint": {
          "@type": "ContactPoint",
          "telephone": "+1-555-123-4567",
          "contactType": "customer service",
          "availableLanguage": "English"
        },
        "address": {
          "@type": "PostalAddress",
          "addressCountry": "US"
        },
        "sameAs": [
          "https://www.linkedin.com/company/west-group-financial",
          "https://www.facebook.com/westgroupfinancial"
        ]
      }
    </script>

    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID" is:inline></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());
      gtag('config', 'GA_MEASUREMENT_ID', {
        page_title: document.title,
        page_location: window.location.href
      });
    </script>
  </body>
</html>
